{{#extends 'base'}}

{{#block "content"}}

<h1>Update your variant for the soap product</h1>

<form method="POST">

    <input type="hidden" name="_csrf" value="{{csrfToken}}" />
    {{{form}}}

    <div>
        {{#if variant.image_url}}
        <img src="{{variant.image_url}}" class="mt-2" id="uploaded_image" />
        {{else}}
        <img src="" style="display:none" id="uploaded_image" />
        {{/if}}
    </div>

    <div>
        <a href="#" class="btn btn-primary mt-2" id="upload_widget">Upload</a>
        <img src="" class="mt-2" style="display:none" id="uploaded_image" />
    </div>

    <button class="btn btn-success mt-3">Update Product</button>

</form>

{{/block}}


{{#block "js"}}

<!-- Cloudinary Widget JS -->
<script src="https://upload-widget.cloudinary.com/global/all.js" type="text/javascript"></script>
<!-- Axios -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.2.1/axios.min.js"
    integrity="sha512-zJYu9ICC+mWF3+dJ4QC34N9RA0OVS1XtPbnf6oXlvGrLGNB8egsEzu/5wgG90I61hOOKvcywoLzwNmPqGAdATA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
    // allow the cloudinary widget to get the JavaScipt
    // this function is called automatically by the upload widget
    // when it needs a signature
    async function generateSignature(callback, params_to_sign) {
        const response = await axios.get('/cloudinary/sign', {
            params: {
                // convert the JSON object to a string
                params_to_sign: JSON.stringify(params_to_sign)
            }
        });
        callback(response.data);
    }

    // this is to create the widget
    // the function takes in one object as configuration as the first parameter
    // the second argument is a callback function which is called
    // when an upload is attempted
    const uploadWidget = cloudinary.createUploadWidget({
        cloudName: "{{cloudinaryName}}",
        apiKey: "{{cloudinaryApiKey}}",
        uploadPreset: "{{cloudinaryPreset}}",
        // tell the upload widget how to get the signature
        uploadSignature: generateSignature
    }, function (error, result) {
        // check if the image is uploaded successfully
        if (!error && result && result.event == "success") {
            console.log("success route entered for upload")
            const url = result.info.url;
            document.querySelector("#id_image_url").value = url;
            document.querySelector("#uploaded_image").src = url;
            document.querySelector("#uploaded_image").style.display = "inline";
            console.log(result.info);
            console.log(result.info.thumbnail_url);
            document.querySelector("#id_thumbnail_url").value = result.info.thumbnail_url
        }
    })

    document.querySelector("#upload_widget").addEventListener("click", function () {
        uploadWidget.open()
    }, false);

</script>
{{/block}}


{{/extends}}